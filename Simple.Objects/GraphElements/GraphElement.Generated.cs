using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable

namespace Simple.Objects
{
    #region |   Code Generated by Simple.Objects Code Generator   |

    partial class GraphElement
    {
        #region |   Protected Members   |

        protected int graphKey, oldGraphKey;
        protected long parentId, oldParentId;
        protected int objectTableId, oldObjectTableId;
        protected long objectId, oldObjectId;
        protected long userId = 1, oldUserId = 1;
        protected long previousParentId, oldPreviousParentId;
        protected bool doesPreviousParentHaveChildren, oldDoesPreviousParentHaveChildren;

        #endregion |   Protected Members   |

        #region |   Private Static Members   |

        private static Func<GraphElement, object?>[] GetFieldValueMethods;
        private static Func<GraphElement, object?>[] GetOldFieldValueMethods;
        private static Action<GraphElement, object>[] SetFieldValueMethods;
        private static Action<GraphElement, object>[] SetOldFieldValueMethods;

        #endregion |   Private Static Members   |

        #region |   Static Methods Initialization   |

        static GraphElement()
        {
            int maxIndex = GraphElementModel.PropertyModel.GetCollection().GetMaxIndex();

            GetFieldValueMethods = new Func<GraphElement, object?>[maxIndex + 1];
            GetFieldValueMethods[GraphElementModel.PropertyModel.Id.PropertyIndex]                             = (item) => item.id;
            GetFieldValueMethods[GraphElementModel.PropertyModel.PreviousId.PropertyIndex]                     = (item) => item.previousId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.GraphKey.PropertyIndex]                       = (item) => item.graphKey;
            GetFieldValueMethods[GraphElementModel.PropertyModel.ParentId.PropertyIndex]                       = (item) => item.parentId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.ObjectTableId.PropertyIndex]                  = (item) => item.objectTableId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.ObjectId.PropertyIndex]                       = (item) => item.objectId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.UserId.PropertyIndex]                         = (item) => item.userId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.OrderIndex.PropertyIndex]                     = (item) => item.orderIndex;
            GetFieldValueMethods[GraphElementModel.PropertyModel.PreviousParentId.PropertyIndex]               = (item) => item.previousParentId;
            GetFieldValueMethods[GraphElementModel.PropertyModel.DoesPreviousParentHaveChildren.PropertyIndex] = (item) => item.doesPreviousParentHaveChildren;

            GetOldFieldValueMethods = new Func<GraphElement, object?>[maxIndex + 1];
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.Id.PropertyIndex]                             = (item) => item.oldId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.PreviousId.PropertyIndex]                     = (item) => item.oldPreviousId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.GraphKey.PropertyIndex]                       = (item) => item.oldGraphKey;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.ParentId.PropertyIndex]                       = (item) => item.oldParentId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.ObjectTableId.PropertyIndex]                  = (item) => item.oldObjectTableId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.ObjectId.PropertyIndex]                       = (item) => item.oldObjectId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.UserId.PropertyIndex]                         = (item) => item.oldUserId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.OrderIndex.PropertyIndex]                     = (item) => item.oldOrderIndex;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.PreviousParentId.PropertyIndex]               = (item) => item.oldPreviousParentId;
            GetOldFieldValueMethods[GraphElementModel.PropertyModel.DoesPreviousParentHaveChildren.PropertyIndex] = (item) => item.oldDoesPreviousParentHaveChildren;

            SetFieldValueMethods = new Action<GraphElement, object>[maxIndex + 1];
            SetFieldValueMethods[GraphElementModel.PropertyModel.Id.PropertyIndex]                             = (item, value) => item.id = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.PreviousId.PropertyIndex]                     = (item, value) => item.previousId = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.GraphKey.PropertyIndex]                       = (item, value) => item.graphKey = (int)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.ParentId.PropertyIndex]                       = (item, value) => item.parentId = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.ObjectTableId.PropertyIndex]                  = (item, value) => item.objectTableId = (int)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.ObjectId.PropertyIndex]                       = (item, value) => item.objectId = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.UserId.PropertyIndex]                         = (item, value) => item.userId = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.OrderIndex.PropertyIndex]                     = (item, value) => item.orderIndex = (int)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.PreviousParentId.PropertyIndex]               = (item, value) => item.previousParentId = (long)value;
            SetFieldValueMethods[GraphElementModel.PropertyModel.DoesPreviousParentHaveChildren.PropertyIndex] = (item, value) => item.doesPreviousParentHaveChildren = (bool)value;

            SetOldFieldValueMethods = new Action<GraphElement, object>[maxIndex + 1];
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.Id.PropertyIndex]                             = (item, value) => item.oldId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.PreviousId.PropertyIndex]                     = (item, value) => item.oldPreviousId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.GraphKey.PropertyIndex]                       = (item, value) => item.oldGraphKey = (int)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.ParentId.PropertyIndex]                       = (item, value) => item.oldParentId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.ObjectTableId.PropertyIndex]                  = (item, value) => item.oldObjectTableId = (int)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.ObjectId.PropertyIndex]                       = (item, value) => item.oldObjectId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.UserId.PropertyIndex]                         = (item, value) => item.oldUserId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.OrderIndex.PropertyIndex]                     = (item, value) => item.oldOrderIndex = (int)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.PreviousParentId.PropertyIndex]               = (item, value) => item.oldPreviousParentId = (long)value;
            SetOldFieldValueMethods[GraphElementModel.PropertyModel.DoesPreviousParentHaveChildren.PropertyIndex] = (item, value) => item.oldDoesPreviousParentHaveChildren = (bool)value;
        }

        #endregion |   Static Methods Initialization   |

        #region |   Properties by Object Property Model   |

        /// <summary>
        /// Gets or sets GraphKey
        /// </summary>
        public int GraphKey
        {
            get { return this.graphKey; }
            internal set { this.SetPropertyValue(GraphElementModel.PropertyModel.GraphKey, value); }
		}

        /// <summary>
        /// Gets ParentId
        /// </summary>
        public long ParentId
        {
            get { return this.parentId; }
		}

        /// <summary>
        /// Gets ObjectTableId
        /// </summary>
        public int ObjectTableId
        {
            get { return this.objectTableId; }
		}

        /// <summary>
        /// Gets ObjectId
        /// </summary>
        public long ObjectId
        {
            get { return this.objectId; }
		}

        /// <summary>
        /// Gets UserId
        /// </summary>
        public long UserId
        {
            get { return this.userId; }
		}

        /// <summary>
        /// Gets or sets PreviousParentId
        /// </summary>
        public long PreviousParentId
        {
            get { return this.previousParentId; }
            set { this.SetPropertyValue(GraphElementModel.PropertyModel.PreviousParentId, value); }
		}

        /// <summary>
        /// Gets or sets DoesPreviousParentHaveChildren
        /// </summary>
        public bool DoesPreviousParentHaveChildren
        {
            get { return this.doesPreviousParentHaveChildren; }
            set { this.SetPropertyValue(GraphElementModel.PropertyModel.DoesPreviousParentHaveChildren, value); }
		}

        #endregion |   Properties by Object Property Model   |

        #region |   One-To-Many Relation Properties   |

        /// <summary>
        /// Gets or sets one-to-many relation primary Parent object.
        /// </summary>
        public GraphElement? Parent
        {
            get { return this.GetOneToManyPrimaryObject<GraphElement>(RelationPolicyModelBase.OneToManyGraphElementToParentGraphElement); }
            set { this.SetOneToManyPrimaryObject(value, RelationPolicyModelBase.OneToManyGraphElementToParentGraphElement); }
        }

        /// <summary>
        /// Gets or sets one-to-many relation primary SimpleObject object.
        /// </summary>
        public SimpleObject SimpleObject
        {
            get { return this.GetOneToManyPrimaryObject<SimpleObject>(RelationPolicyModelBase.OneToManyGraphElementToSimpleObject)!; }
            set { this.SetOneToManyPrimaryObject(value, RelationPolicyModelBase.OneToManyGraphElementToSimpleObject); }
        }

        /// <summary>
        /// Gets one-to-many relation foreign GraphElements collection.
        /// </summary>
        public override SimpleObjectCollection<GraphElement> GraphElements
        {
            get { return this.GetOneToManyForeignObjectCollection<GraphElement>(RelationPolicyModelBase.OneToManyGraphElementToParentGraphElement); }
        }

        #endregion |   One-To-Many Relation Properties   |

        #region |   Public Overriden Methods   |

        /// <summary>
        /// Gets the GraphElementModel definition instance.
        /// </summary>
        public override ISimpleObjectModel GetModel()
        {
            return GraphElementModel.Instance; 
        }

        /// <summary>
        /// Gets the one-to-many collection based on relation key. If no one-to-many relation specified in relation model for this object, the base class method is called.
        /// </summary>
        /// <param name="relationKey">The one-to-many relation key</param>
        /// <returns>The <see cref="SimpleObjectCollection?"/> result.</returns>
        public override SimpleObjectCollection? GetOneToManyForeignObjectCollection(int relationKey)
        {
            if (relationKey == RelationPolicyModelBase.OneToManyGraphElementToParentGraphElement.RelationKey)
                return this.GraphElements;

            return base.GetOneToManyForeignObjectCollection(relationKey);
        }

        #endregion |   Public Overriden Methods   |

        #region |   Protected Abstract Overriden Methods  |

        /// <summary>
        /// Gets field property value by property index.
        /// </summary>
        protected override object? GetFieldValue(int propertyIndex)
        {
            return GetFieldValueMethods[propertyIndex](this);
        }

        /// <summary>
        /// Gets field old property value by property index.
        /// </summary>
        protected override object? GetOldFieldValue(int propertyIndex)
        {
            return GetOldFieldValueMethods[propertyIndex](this);
        }

        /// <summary>
        /// Sets field property value by property index.
        /// </summary>
        protected override void SetFieldValue(int propertyIndex, object value)
        {
            SetFieldValueMethods[propertyIndex](this, value);
        }

        /// <summary>
        /// Sets field old property value by property index.
        /// </summary>
        protected override void SetOldFieldValue(int propertyIndex, object value)
        {
            SetOldFieldValueMethods[propertyIndex](this, value);
        }

        #endregion |   Protected Abstract Overriden Methods  |
    }

    #endregion |   Code Generated by Simple.Objects Code Generator   |
}
